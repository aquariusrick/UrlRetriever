// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function($) {
    var AppView, Tag, TagView, UrlResult, UrlResultView, UrlSummaryView;
    UrlResult = (function(_super) {
      __extends(UrlResult, _super);

      function UrlResult() {
        return UrlResult.__super__.constructor.apply(this, arguments);
      }

      UrlResult.prototype.defaults = {
        url: "",
        content: "",
        selectedTag: null
      };

      return UrlResult;

    })(Backbone.Model);
    Tag = (function(_super) {
      __extends(Tag, _super);

      function Tag() {
        return Tag.__super__.constructor.apply(this, arguments);
      }

      Tag.prototype.defaults = {
        tagName: "",
        usageCount: "",
        isSelected: false
      };

      return Tag;

    })(Backbone.Model);
    TagView = (function(_super) {
      __extends(TagView, _super);

      function TagView() {
        return TagView.__super__.constructor.apply(this, arguments);
      }

      TagView.prototype.events = {
        click: "click"
      };

      TagView.prototype.template = _.template($("#tag_summary_entry").html());

      TagView.prototype.initialize = function() {
        return _.bindAll(this, "render", "click");
      };

      TagView.prototype.click = function() {
        return this.trigger("click", this.model.get('tagName'));
      };

      TagView.prototype.render = function() {
        var html;
        html = this.template(this.model.toJSON());
        this.setElement($(html));
        return this;
      };

      return TagView;

    })(Backbone.View);
    UrlSummaryView = (function(_super) {
      __extends(UrlSummaryView, _super);

      function UrlSummaryView() {
        return UrlSummaryView.__super__.constructor.apply(this, arguments);
      }

      UrlSummaryView.prototype.el = "div.url_summary";

      UrlSummaryView.prototype.events = {};

      UrlSummaryView.prototype.initialize = function() {
        _.bindAll(this, "render", "tag_click", "add_tag");
        this.list = this.$('ul', this.$el);
        return this.listenTo(this.model, "change:selectedTag change:content", this.render);
      };

      UrlSummaryView.prototype.get_tag_matches = function(html_string) {
        var matchArray, pattern, resultDict, tagName;
        pattern = /<([A-Z][A-Z0-9]*)\b[^>]*>/gmi;
        resultDict = {};
        while ((matchArray = pattern.exec(html_string)) !== null) {
          tagName = matchArray[1].toUpperCase();
          if (!(tagName in resultDict)) {
            resultDict[tagName] = 0;
          }
          resultDict[tagName] += 1;
        }
        return resultDict;
      };

      UrlSummaryView.prototype.add_tag = function(data) {
        var model, selectedTag, view;
        console.log(data);
        model = new Tag(data);
        selectedTag = this.model.get("selectedTag");
        if (selectedTag === model.get("tagName")) {
          model.set("isSelected", true);
        }
        view = new TagView({
          model: model
        });
        this.listenTo(view, "click", this.tag_click);
        return this.list.append(view.render().el);
      };

      UrlSummaryView.prototype.tag_click = function(e) {
        return this.model.set("selectedTag", e);
      };

      UrlSummaryView.prototype.render = function() {
        var count, name, results, tagNames, _i, _len;
        this.list.html("");
        results = this.get_tag_matches(this.model.get('content'));
        tagNames = _.keys(results).sort();
        for (_i = 0, _len = tagNames.length; _i < _len; _i++) {
          name = tagNames[_i];
          count = results[name];
          console.log("" + name + " - " + count);
          this.add_tag({
            tagName: name,
            usageCount: count
          });
        }
        return this;
      };

      return UrlSummaryView;

    })(Backbone.View);
    UrlResultView = (function(_super) {
      __extends(UrlResultView, _super);

      function UrlResultView() {
        return UrlResultView.__super__.constructor.apply(this, arguments);
      }

      UrlResultView.prototype.el = "div.url_detail";

      UrlResultView.prototype.events = {};

      UrlResultView.prototype.template = _.template($("#url_detail").html());

      UrlResultView.prototype.initialize = function() {
        _.bindAll(this, "render");
        return this.listenTo(this.model, "change:selectedTag change:content", this.render);
      };

      UrlResultView.prototype.render = function() {
        var content;
        content = this.highlight_tags(this.model.get('content'), this.model.get('selectedTag'));
        this.model.set("display_content", content);
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      UrlResultView.prototype.highlight_tags = function(searchString, tagName) {
        var first, last, matchArray, pattern, re, resultString;
        if (!tagName) {
          return _.escape(searchString);
        }
        pattern = "</?" + tagName + "\\b[^>]*>";
        re = new RegExp(pattern, "gmi");
        resultString = "";
        first = 0;
        last = 0;
        while ((matchArray = re.exec(searchString)) !== null) {
          last = matchArray.index;
          resultString += _.escape(searchString.substring(first, last));
          resultString += "<span class='found'>" + (_.escape(matchArray[0])) + "</span>";
          first = re.lastIndex;
        }
        resultString += _.escape(searchString.substring(first, searchString.length));
        return resultString;
      };

      return UrlResultView;

    })(Backbone.View);
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.el = "div#container";

      AppView.prototype.events = {
        "click    button.submit": "set_url",
        "keypress #url_input": "on_keypress"
      };

      AppView.prototype.initialize = function() {
        _.bindAll(this, "url_success", "render", "on_keypress");
        this.$input = this.$("#url_input");
        this.model = new UrlResult();
        this.summaryView = new UrlSummaryView({
          model: this.model
        });
        this.resultView = new UrlResultView({
          model: this.model
        });
        this.listenTo(this.model, "change:url", this.fetch_url_content);
        this.listenTo(this.model, "change:content", function() {
          return this.$el.removeClass("intro").addClass("normal");
        });
        this.$input.val(window.location);
        return this.$el.addClass("intro");
      };

      AppView.prototype.on_keypress = function(e) {
        if (e.keyCode === 13) {
          return this.set_url();
        }
      };

      AppView.prototype.set_url = function() {
        return this.model.set("url", this.$input.val());
      };

      AppView.prototype.fetch_url_content = function() {
        var url;
        url = this.model.get("url");
        return $.get("api/retrieve_url?url=" + encodeURIComponent(url), this.url_success);
      };

      AppView.prototype.url_success = function(data) {
        return this.model.set({
          content: data.content,
          selectedTag: null
        });
      };

      return AppView;

    })(Backbone.View);
    window.AppView = AppView;
    return window.App = new AppView();
  });

}).call(this);
